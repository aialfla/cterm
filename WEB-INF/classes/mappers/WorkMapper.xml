<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.ezen.cterm.mapper.workMapper">

	<!-- !! Mapper 등록 후 꼭 DAO 주소 입력할 것 !! ex) "mapper namespace.id" -->
	
	<!-- 근무기록 갯수 세기 -->
	<select id="count" parameterType="map" resultType="int">
		select count(distinct workNO) 
		from work a 
		inner join member b on a.id = b.id
		left join overtime c ON a.id = c.id and a.date = c.date 
		where 
		(c.state is null or c.state like 2) and
		b.state between 0 and 1 and (c.state = 2 or c.state is null) and (a.date BETWEEN
		<choose>
			<when test='startday neq null and startday neq "" and endday neq null and endday neq ""'>
				#{ startday } and #{ endday })
			</when>
			<otherwise>
				(DATE_FORMAT(NOW(),'%Y-%m-01')) and (DATE_FORMAT(LAST_DAY(NOW()),'%Y-%m-%d')))
			</otherwise>
		</choose>
		<choose>
			<when test="duty == 0">
				<if test="searchName != null and searchName != ''">
				 and name like concat('%',#{searchName},'%')
				</if>
				<if test="searchDept != null">
					and dept 
					<choose>
						<when test="searchDept == 0"> between 1 and 3 </when>
						<when test="searchDept == 1"> = 1 </when>
						<when test="searchDept == 2"> = 2 </when>
						<when test="searchDept == 3"> = 3 </when>
					</choose>
				</if>
				<if test="searchDuty != null">
					and duty  
					<choose>
						<when test="searchDuty == 0"> between 1 and 4 </when>
						<when test="searchDuty == 1"> = 1 </when>
						<when test="searchDuty == 2"> = 2 </when>
						<when test="searchDuty == 3"> = 3 </when>
						<when test="searchDuty == 4"> = 4 </when>
					</choose>
				</if>
			</when>
			<otherwise>
				<if test="searchName != null and searchName != ''">
				 and name like concat('%',#{searchName},'%')
				</if>
				and dept = #{dept} and duty &gt; #{duty}
			</otherwise>
		</choose>
	</select>
	
	<!-- 출근시간을 기록 -->
	<insert id="addStart" parameterType="MemberVo">
		insert into work (
		id, 
		date, 
		start
		) values (
		#{id}, 
		date(now()),
		time(now())
		)
	</insert>
	
	<!-- 출근시간 기록이 있는지 체크 -->
	<select id="checkStart" resultType="int">
		select count(*) as count from work 
		where id = #{id} and date = date(now()) and start is not null
	</select>
	
	<!-- 퇴근시간을 기록 -->
	<update id="addEnd" parameterType="MemberVo">
		update work set end = time(now())
		where id = #{id} and date = date(now())
	</update>
	
<!-- 	<select id="checkEnd" resultType="int"> -->
<!-- 		select count(*) as count from work  -->
<!-- 		where id = #{id} and end is null -->
<!-- 	</select> -->

	<!-- 찍혀있는 출근시간과 퇴근시간을 조회 -->
	<select id="checkTime" resultType="WorkVo">
		select start, end from work 
		where id = #{id} and date = date(now())
	</select>
	
	<!-- 내 출퇴근 기록을 조회 -->
	<select id="list_mine" parameterType="Map" resultType="Map">
		select a.date, a.start, a.end, 
		case
			when (c.state like 2) then 
			addtime(
				case 
				when (a.start &lt; 090000 and a.end &gt; 180000) then time(090000) 
				when (a.start &lt; 090000) then subtime(time(a.end),time(090000)) 
				when (a.end &gt; 180000 and a.start &lt; 180000) then subtime(time(180000),time(a.start)) 
				else subtime(a.end, a.start)
				end, subtime(c.end, c.start))
			else 
				case 
				when (a.start &lt; 090000 and a.end &gt; 180000) then time(090000) 
				when (a.start &lt; 090000) then SUBTIME(time(a.end),time(090000)) 
				when (a.end &gt; 180000 and a.start &lt; 180000) then subtime(time(180000),time(a.start)) 
				else subtime(a.end, a.start) end 
			end as totaltime,
		max(case 
			when (c.state like 2) then time_format(subtime(c.end, c.start),"%H:%i:%s") 
			else time(000000) end )
			as overtime
		from work a left join overtime c ON a.id = c.id and a.date = c.date
		where a.id = #{id} and (a.date BETWEEN
		<choose>
			<when test='startday neq null and startday neq "" and endday neq null and endday neq ""'>
				#{ startday } and #{ endday })
			</when>
			<otherwise>
				adddate(curdate(), - WEEKDAY(curdate()) - 1) and adddate(curdate(), - WEEKDAY(curdate()) + 5))
			</otherwise>
		</choose>
		group by workNO
		order by date desc 
	</select>
	
	<!-- 직원 전체의 출퇴근 기록 조회 -->
	<select id="list" parameterType="map" resultType="map">
		select a.date, a.start, a.end, b.dept, b.duty, b.name, b.id, 
		case 
			when (a.start &lt; 090000 and a.end &gt; 180000) then time(090000) 
			when (a.start &lt; 090000) then SUBTIME(time(a.end),time(090000)) 
			when (a.end &gt; 180000 and a.start &lt; 180000) then subtime(time(180000),time(a.start)) 
			else addtime(subtime(a.end, a.start), subtime(c.end, c.start))
			end as worktime, 
		case 
			when (c.state like 2) then time_format(subtime(c.end, c.start),"%H:%i:%s") 
			end as overtime,
		case
			when (c.state like 2) then 
			addtime(
				case 
				when (a.start &lt; 090000 and a.end &gt; 180000) then time(090000) 
				when (a.start &lt; 090000) then SUBTIME(time(a.end),time(090000)) 
				when (a.end &gt; 180000 and a.start &lt; 180000) then subtime(time(180000),time(a.start)) 
				else subtime(a.end, a.start)
				end, subtime(c.end, c.start))
			else 
				case 
				when (a.start &lt; 090000 and a.end &gt; 180000) then time(090000) 
				when (a.start &lt; 090000) then SUBTIME(time(a.end),time(090000)) 
				when (a.end &gt; 180000 and a.start &lt; 180000) then subtime(time(180000),time(a.start)) 
				else subtime(a.end, a.start) end 
			end as totaltime 
		from work a 
		inner join member b on a.id = b.id 
		left join overtime c ON a.id = c.id and a.date = c.date 
		
		where
		b.state = 1 and (a.date BETWEEN
		<choose>
			<when test='startday neq null and startday neq "" and endday neq null and endday neq ""'>
				#{ startday } and #{ endday })
			</when>
			<otherwise>
				(DATE_FORMAT(NOW(),'%Y-%m-01')) and (DATE_FORMAT(LAST_DAY(NOW()),'%Y-%m-%d')))
			</otherwise>
		</choose>
		<choose>
			<when test="duty == 0">
				<if test="searchName != null and searchName != ''">
				 and name like concat('%',#{searchName},'%')
				</if>
				<if test="searchDept != null">
					and dept 
					<choose>
						<when test="searchDept == 0"> between 1 and 3 </when>
						<when test="searchDept == 1"> = 1 </when>
						<when test="searchDept == 2"> = 2 </when>
						<when test="searchDept == 3"> = 3 </when>
					</choose>
				</if>
				<if test="searchDuty != null">
					and duty  
					<choose>
						<when test="searchDuty == 0"> between 1 and 4 </when>
						<when test="searchDuty == 1"> = 1 </when>
						<when test="searchDuty == 2"> = 2 </when>
						<when test="searchDuty == 3"> = 3 </when>
						<when test="searchDuty == 4"> = 4 </when>
					</choose>
				</if>
			</when>
			<otherwise>
				<if test="searchName != null and searchName != ''">
				 and name like concat('%',#{searchName},'%')
				</if>
				and dept = #{dept} and duty &gt; #{duty}
			</otherwise>
		</choose>
		group by workNO
		order by a.date desc, a.start desc, dept, duty, name 
		limit #{ limitOffset }, #{ perPage }
	</select>
	
	
	<!-- 주간 근무시간을 조회 -->
	<select id="weeklyWork" parameterType="MemberVo" resultType="Map">
		select distinct(a.date),
		 time_format(sec_to_time(sum(time_to_sec(case
			when (c.state like 2) then 
			addtime(
				case 
				when (a.start &lt; 090000 and a.end &gt; 180000) then time(090000) 
				when (a.start &lt; 090000) then SUBTIME(time(a.end),time(090000)) 
				when (a.end &gt; 180000 and a.start &lt; 180000) then subtime(time(180000),time(a.start)) 
				else subtime(a.end, a.start)
				end, subtime(c.end, c.start))
			else 
				case 
				when (a.start &lt; 090000 and a.end &gt; 180000) then time(090000) 
				when (a.start &lt; 090000) then SUBTIME(time(a.end),time(090000)) 
				when (a.end &gt; 180000 and a.start &lt; 180000) then subtime(time(180000),time(a.start))
				else subtime(a.end, a.start) end 
			end ))), '%k:%i:%s' ) weeklyWork 
		from work a left join overtime c ON a.id = c.id and a.date = c.date
		where a.date
			 between ADDDATE( curdate(), - WEEKDAY(curdate()) + 0 ) 
			 and ADDDATE( curdate(), - WEEKDAY(curdate()) + 6 )
		  and a.id = #{id}
	</select>
	
	<!-- 미등록 퇴근시간을 18:00로 등록 ( 관리자 전용 ) -->
	<update id="setEndtimeByAdmin" parameterType="WorkVo">
		update work set end = time(180000)
		where id = #{id} and date = #{date}
	</update>
</mapper>